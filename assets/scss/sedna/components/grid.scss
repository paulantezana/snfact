@mixin gridColumnWidth($i) {
    $n : #{$i - 1};
    $column-width : calc((100% - var(--gap) * #{$n}) / #{$i});
    grid-template-columns : repeat($i, $column-width);
}

@mixin SnGrid(){
    .#{$classPrefix}Grid {
        display               : grid;
        grid-template-columns : 100%;
        grid-column-gap       : var(--gap);

        @for $i from 0 through 4 {
            &.gap-#{$i} {
                --gap: #{$lUnit * $i};
            }
        }

        // Add Gap
        &.row-gap,
        &.rows-gap {
            grid-row-gap : var(--gap);
        }

        // Define columnas en containers e items por breakpoint
        @each $size, $screen-size in $breakpoints {
            // Styles by breakpoint
            @include from($size) {
                @for $i from 1 through $maxGridColumns {
                    // One column
                    @if $i == 1 {
                        &.#{$size}-grid-1 {
                            grid-template-columns : 100%;
                        }
                    }

                    // More columns
                    @if $i > 1 {
                        &.#{$size}-grid-#{$i} {
                            @include gridColumnWidth($i);
                        }
                    }

                    // Columnas en los items
                    > .span-#{$size}-#{$i},
                    > .#{$size}-cols-#{$i} {
                        grid-column-end : span $i;
                    }

                    // rows en los items
                    > .#{$size}-rows-#{$i} {
                        grid-row-end : span $i;
                    }

                    // Inicio de columna en items
                    > .#{$size}-x-#{$i} {
                        grid-column-start : $i;
                    }

                    // Inicio de fila en items
                    > .#{$size}-y-#{$i} {
                        grid-row-start : $i;
                    }
                }
            }
        }
    }
}
